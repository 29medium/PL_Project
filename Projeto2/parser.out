Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Comando
Rule 1     Comando -> id = Exp
Rule 2     Comando -> id
Rule 3     Exp -> Exp + Termo
Rule 4     Exp -> Exp - Termo
Rule 5     Exp -> Termo
Rule 6     Termo -> Termo * Fator
Rule 7     Termo -> Termo / Fator
Rule 8     Termo -> Fator
Rule 9     Fator -> ( Exp )
Rule 10    Fator -> num
Rule 11    Fator -> id

Terminals, with rules where they appear

(                    : 9
)                    : 9
*                    : 6
+                    : 3
-                    : 4
/                    : 7
=                    : 1
error                : 
id                   : 1 2 11
num                  : 10

Nonterminals, with rules where they appear

Comando              : 0
Exp                  : 1 3 4 9
Fator                : 6 7 8
Termo                : 3 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . Comando
    (1) Comando -> . id = Exp
    (2) Comando -> . id

    id              shift and go to state 2

    Comando                        shift and go to state 1

state 1

    (0) S' -> Comando .



state 2

    (1) Comando -> id . = Exp
    (2) Comando -> id .

    =               shift and go to state 3
    $end            reduce using rule 2 (Comando -> id .)


state 3

    (1) Comando -> id = . Exp
    (3) Exp -> . Exp + Termo
    (4) Exp -> . Exp - Termo
    (5) Exp -> . Termo
    (6) Termo -> . Termo * Fator
    (7) Termo -> . Termo / Fator
    (8) Termo -> . Fator
    (9) Fator -> . ( Exp )
    (10) Fator -> . num
    (11) Fator -> . id

    (               shift and go to state 8
    num             shift and go to state 9
    id              shift and go to state 4

    Exp                            shift and go to state 5
    Termo                          shift and go to state 6
    Fator                          shift and go to state 7

state 4

    (11) Fator -> id .

    *               reduce using rule 11 (Fator -> id .)
    /               reduce using rule 11 (Fator -> id .)
    +               reduce using rule 11 (Fator -> id .)
    -               reduce using rule 11 (Fator -> id .)
    $end            reduce using rule 11 (Fator -> id .)
    )               reduce using rule 11 (Fator -> id .)


state 5

    (1) Comando -> id = Exp .
    (3) Exp -> Exp . + Termo
    (4) Exp -> Exp . - Termo

    $end            reduce using rule 1 (Comando -> id = Exp .)
    +               shift and go to state 10
    -               shift and go to state 11


state 6

    (5) Exp -> Termo .
    (6) Termo -> Termo . * Fator
    (7) Termo -> Termo . / Fator

    +               reduce using rule 5 (Exp -> Termo .)
    -               reduce using rule 5 (Exp -> Termo .)
    $end            reduce using rule 5 (Exp -> Termo .)
    )               reduce using rule 5 (Exp -> Termo .)
    *               shift and go to state 12
    /               shift and go to state 13


state 7

    (8) Termo -> Fator .

    *               reduce using rule 8 (Termo -> Fator .)
    /               reduce using rule 8 (Termo -> Fator .)
    +               reduce using rule 8 (Termo -> Fator .)
    -               reduce using rule 8 (Termo -> Fator .)
    $end            reduce using rule 8 (Termo -> Fator .)
    )               reduce using rule 8 (Termo -> Fator .)


state 8

    (9) Fator -> ( . Exp )
    (3) Exp -> . Exp + Termo
    (4) Exp -> . Exp - Termo
    (5) Exp -> . Termo
    (6) Termo -> . Termo * Fator
    (7) Termo -> . Termo / Fator
    (8) Termo -> . Fator
    (9) Fator -> . ( Exp )
    (10) Fator -> . num
    (11) Fator -> . id

    (               shift and go to state 8
    num             shift and go to state 9
    id              shift and go to state 4

    Exp                            shift and go to state 14
    Termo                          shift and go to state 6
    Fator                          shift and go to state 7

state 9

    (10) Fator -> num .

    *               reduce using rule 10 (Fator -> num .)
    /               reduce using rule 10 (Fator -> num .)
    +               reduce using rule 10 (Fator -> num .)
    -               reduce using rule 10 (Fator -> num .)
    $end            reduce using rule 10 (Fator -> num .)
    )               reduce using rule 10 (Fator -> num .)


state 10

    (3) Exp -> Exp + . Termo
    (6) Termo -> . Termo * Fator
    (7) Termo -> . Termo / Fator
    (8) Termo -> . Fator
    (9) Fator -> . ( Exp )
    (10) Fator -> . num
    (11) Fator -> . id

    (               shift and go to state 8
    num             shift and go to state 9
    id              shift and go to state 4

    Termo                          shift and go to state 15
    Fator                          shift and go to state 7

state 11

    (4) Exp -> Exp - . Termo
    (6) Termo -> . Termo * Fator
    (7) Termo -> . Termo / Fator
    (8) Termo -> . Fator
    (9) Fator -> . ( Exp )
    (10) Fator -> . num
    (11) Fator -> . id

    (               shift and go to state 8
    num             shift and go to state 9
    id              shift and go to state 4

    Termo                          shift and go to state 16
    Fator                          shift and go to state 7

state 12

    (6) Termo -> Termo * . Fator
    (9) Fator -> . ( Exp )
    (10) Fator -> . num
    (11) Fator -> . id

    (               shift and go to state 8
    num             shift and go to state 9
    id              shift and go to state 4

    Fator                          shift and go to state 17

state 13

    (7) Termo -> Termo / . Fator
    (9) Fator -> . ( Exp )
    (10) Fator -> . num
    (11) Fator -> . id

    (               shift and go to state 8
    num             shift and go to state 9
    id              shift and go to state 4

    Fator                          shift and go to state 18

state 14

    (9) Fator -> ( Exp . )
    (3) Exp -> Exp . + Termo
    (4) Exp -> Exp . - Termo

    )               shift and go to state 19
    +               shift and go to state 10
    -               shift and go to state 11


state 15

    (3) Exp -> Exp + Termo .
    (6) Termo -> Termo . * Fator
    (7) Termo -> Termo . / Fator

    +               reduce using rule 3 (Exp -> Exp + Termo .)
    -               reduce using rule 3 (Exp -> Exp + Termo .)
    $end            reduce using rule 3 (Exp -> Exp + Termo .)
    )               reduce using rule 3 (Exp -> Exp + Termo .)
    *               shift and go to state 12
    /               shift and go to state 13


state 16

    (4) Exp -> Exp - Termo .
    (6) Termo -> Termo . * Fator
    (7) Termo -> Termo . / Fator

    +               reduce using rule 4 (Exp -> Exp - Termo .)
    -               reduce using rule 4 (Exp -> Exp - Termo .)
    $end            reduce using rule 4 (Exp -> Exp - Termo .)
    )               reduce using rule 4 (Exp -> Exp - Termo .)
    *               shift and go to state 12
    /               shift and go to state 13


state 17

    (6) Termo -> Termo * Fator .

    *               reduce using rule 6 (Termo -> Termo * Fator .)
    /               reduce using rule 6 (Termo -> Termo * Fator .)
    +               reduce using rule 6 (Termo -> Termo * Fator .)
    -               reduce using rule 6 (Termo -> Termo * Fator .)
    $end            reduce using rule 6 (Termo -> Termo * Fator .)
    )               reduce using rule 6 (Termo -> Termo * Fator .)


state 18

    (7) Termo -> Termo / Fator .

    *               reduce using rule 7 (Termo -> Termo / Fator .)
    /               reduce using rule 7 (Termo -> Termo / Fator .)
    +               reduce using rule 7 (Termo -> Termo / Fator .)
    -               reduce using rule 7 (Termo -> Termo / Fator .)
    $end            reduce using rule 7 (Termo -> Termo / Fator .)
    )               reduce using rule 7 (Termo -> Termo / Fator .)


state 19

    (9) Fator -> ( Exp ) .

    *               reduce using rule 9 (Fator -> ( Exp ) .)
    /               reduce using rule 9 (Fator -> ( Exp ) .)
    +               reduce using rule 9 (Fator -> ( Exp ) .)
    -               reduce using rule 9 (Fator -> ( Exp ) .)
    $end            reduce using rule 9 (Fator -> ( Exp ) .)
    )               reduce using rule 9 (Fator -> ( Exp ) .)

